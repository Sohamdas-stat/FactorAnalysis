cor(mydata)
setwd("C:/Users/Mudgal/Documents/BACP/Module3 - Advance Stat")
mydata=read.csv("PCA-Brown.csv", header=TRUE)
mydata
attach(mydata)
mydata=mydata[,2:8] ## omit col 1 from data set .
cor(mydata)
install.packages(nFactors)
library(nFactors)
ev = eigen(cor(mydata)) # get eigenvalues
ev
EigenValue=ev$values
EigenValue
Factor=c(1,2,3,4,5,6,7)
Scree=data.frame(Factor,EigenValue)
plot(Scree,main="Scree Plot", col="Blue",ylim=c(0,4))
lines(Scree,col="Red")
data1=read.csv("PCA-nm.csv", header=TRUE)
data1
PreventCav=data1$V1
StrengthGum=data1$V3
data1
PreventCav=data1$V1
ShinyTeeth=data1$V2
StrengthGum=data1$V3
Fresh=data1$V4
Decay=8-data1$V5  ## as score needs to be reversed .
Attractive=data1$V6
mydata=data.frame(PreventCav,ShinyTeeth,StrengthGum,Fresh,Decay,Attractive)
mydata
attach(mydata)
ev = eigen(cor(mydata)) # get eigenvalues
ev
EigenValue=ev$values
Factor=c(1,2,3,4,5,6)
Scree=data.frame(Factor,EigenValue)
plot(Scree,main="Scree Plot", col="Blue")
library(psych)
Unrotate=principal(mydata, nfactors=6, rotate="none")
print(Unrotate,digits=3)
UnrotatedProfile=plot(Unrotate,row.names(Unrotate$loadings))
Rotate=principal(mydata,nfactors=2,rotate="varimax")
print(Rotate,digits=3)
UnrotatedProfile=plot(Unrotate,row.names(Unrotate$loadings))
Rotate=principal(mydata,nfactors=2,rotate="varimax")
print(Rotate,digits=3)
Unrotate=principal(mydata, nfactors=6, rotate="none")
print(Unrotate,digits=3)
Unrotate=principal(mydata, nfactors=2, rotate="none")
print(Unrotate,digits=3)
UnrotatedProfile=plot(Unrotate,row.names(Unrotate$loadings))
factor.scores(mydata, f=Rotate$loadings,  method = "Harman" )
ev
EigenValue=ev$values
EigenValue
Scree=data.frame(Factor,EigenValue)
plot(Scree,main="Scree Plot", col="Blue")
lines(Scree,col="Red")
print(Unrotate,digits=3)
setwd("C:/Users/Mudgal/Documents/BACP/Module3 - Advance Stat\Mini project")
setwd("C:/Users/Mudgal/Documents/BACP/Module3 - Advance Stat/Mini project")
mydata=read.csv("Factor-Hair-Revised.csv", header=TRUE)
mydata
attach(mydata)
mydata = mydata[,2,12]
mydata
mydata
mydata=read.csv("Factor-Hair-Revised.csv", header=TRUE)
mydata
mydata[1,4]
mydata[,4]
mydata[,4,]
mydata[,4,11]
mydata[,4,11,]
mydata[,c(2,11)]
mydata[,c(2:11)]
mydata[,c(2:12)]
mydata=mydata[,c(2:12)]
mydata
##correlation
mycorr = cor(mydata)
mycorr
plot(mycorr)
ev=eigen(cor(mydata))
ev
EigenValue=ev$values
EigenValue
Factor=c(1,2,3,4)
Scree=data.frame(Factor,EigenValue)
EigenValue
EigenValue = EigenValue[,1:4]
EigenValue[,1:4]
EigenValue[,1]
EigenValue[1]
EigenValue[1,2]
EigenValue[1:2]
EigenValue[1:4]
EigenValue=EigenValue[1:4]
EigenValue
Factor=c(1,2,3,4)
Scree=data.frame(Factor,EigenValue)
plot(Scree,main="Scree Plot", col="Blue")
lines(Scree,col="Red")
EigenValue=ev$values
EigenValue
#EigenValue=EigenValue[1:4]
#EigenValue
Factor=c(1,2,3,4,5,6,7,8,9,10,11)
Scree=data.frame(Factor,EigenValue)
plot(Scree,main="Scree Plot", col="Blue")
lines(Scree,col="Red")
EigenValue
## in decreasing order then we have multicolinearity
max(EigenValue)/min(EigenValue)
max(EigenValue)
min(EigenValue)
kappa(EigenValue)
kappa(mycorr)
library(nFactors)
ev
plot(Scree,main="Scree Plot", col="Blue")
lines(Scree,col="Red")
library(psych)
Unrotate=principal(mydata, nfactors=4, rotate="none")
print(Unrotate,digits=4)
UnrotatedProfile=plot(Unrotate,row.names(Unrotate$loadings))
UnrotatedProfile=plot(Unrotate,row.names(Unrotate$loadings))
Rotate=principal(mydata,nfactors=2,rotate="varimax")
print(Rotate,digits=3)
print(Rotate,digits=4)
print(Rotate,digits=4)
Rotate=principal(mydata,nfactors=4,rotate="varimax")
print(Rotate,digits=4)
plot(mycorr)
ev
plot(mycorr)
## orhogonal rotation
UnrotatedProfile=plot(Unrotate,row.names(Unrotate$loadings))
Rotate=principal(mydata,nfactors=4,rotate="varimax")
print(Rotate,digits=4)
Rotate$scores
?Rotate$score
summary(insurance)
##correlation
mycorr = round (cor(mydata),2)
mycorr
?lm
mydata
mydata=read.csv("Factor-Hair-Revised.csv", header=TRUE)
mydata
head(mydata)
attach(mydata)
#mydata=mydata[,c(2:12)]  ###extracting 2 to 12 columns only
##checking othere method for COL - VIF
mydata=mydata[,c(2:13)]  ###extracting 2 to 13 columns
mydata
##correlation
mycorr = round (cor(mydata),2)
mycorr
lm(Satisfaction~.,mydata)
summary(model)
model =lm(Satisfaction~.,mydata)
summary(model)
vif(model)
library(car)
vif(model)
aov(model)
model
mycorr
setwd("C:/Users/Mudgal/Documents/BACP/Module3 - Advance Stat/Mini project")
mydata=read.csv("Factor-Hair-Revised.csv", header=TRUE)
mydata
head(mydata)
mydata=mydata[,c(2:12)]  ###extracting 2 to 12 columns only
##correlation
mycorr = round (cor(mydata),2)
mycorr
##checking othere method for COL - VIF
#mydata=mydata[,c(2:13)]  ###extracting 2 to 13 columns
names(mydata)
plot(ProdQual,ProdLine)
plot(mycorr)
plot(mycorr)
plot(mycorr)
plot(ProdQual,ProdLine)
plot(mydata)
plot(mydata)
library(Corrplot)
require(corrplot)
install.packages(corrplot)
install.packages("corrplot")
library(corrplot)
rquery.corrmat(mydata)
rquery.cormat(mydata)
require("corrplot")
rquery.cormat(mydata)
?corrplot
corrplot(mydata)
##checking othere method for COL - VIF
#mydata=mydata[,c(2:13)]  ###extracting 2 to 13 columns
names(mydata)
corrplot(mydata, type="upper", order="hclust",
col=brewer.pal(n=8, name="RdYlBu"))
view(mydata)
library(nFactors)
plot(mycorr)
plot(mycorr)
ev=eigen(cor(mydata)) ## eigen value is the basis for selecting # of factors
ev
round(ev,3)
EigenValue=ev$values
ev
EigenValue=ev$values
EigenValue  ### eigen values are varying in magnitude and are
#EigenValue=EigenValue[1:4]
#EigenValue
Factor=c(1,2,3,4,5,6,7,8,9,10,11)
Scree=data.frame(Factor,EigenValue)
plot(Scree,main="Scree Plot", col="Blue")
lines(Scree,col="Red")
## get principal component factors
Unrotate=principal(mydata, nfactors=4, rotate="none")
print(Unrotate,digits=4)
## orthogonal rotation
UnrotatedProfile=plot(Unrotate,row.names(Unrotate$loadings))
Rotate=principal(mydata,nfactors=4,rotate="varimax")
print(Rotate,digits=4)
Rotate$scores #will give scores for 4 factors, here we can check for these 4 factors
print(Rotate,digits=4)
## orthogonal rotation
UnrotatedProfile=plot(Unrotate,row.names(Unrotate$loadings))
Rotate$loadings
RotatedProfile=plot(Rotate,row.names(Rotate$loadings))
Rotate
RotatedProfile=plot(Rotate,row.names(Rotate$loadings),cex=1.0)
RotatedProfile=plot(Rotate,row.names(Rotate$loadings),cex=1.0)
Rotate$scores #will give scores for 4 factors, here we can check for these 4 factors
Rotate$scores[1] #will give scores for 4 factors, here we can check for these 4 factors
Rotate$scores[1,] #will give scores for 4 factors, here we can check for these 4 factors
Rotate$scores[,1] #will give scores for 4 factors, here we can check for these 4 factors
OrderMangement=Rotate$scores[,1] #RC1
SalesMangement=Rotate$scores[,1] #RC2
OrderMangement=Rotate$scores[,1] #RC1
SalesMangement=Rotate$scores[,2] #RC2
CustomerMangement=Rotate$scores[,3] #RC3
ProductMangement=Rotate$scores[,4] #RC4
mydata[13]
mydata[,13]
##getting customer satisfaciton variable
mydata_Satisfation =read.csv("Factor-Hair-Revised.csv", header=TRUE)
mydata_Satisfation[,12]
mydata_Satisfation[,13]
mydata_Satisfation=mydata_Satisfation[,13]
RegressionModel = C(OrderMangement,SalesMangement,CustomerMangement,
ProductMangement,mydata_Satisfation)
OrderMangement
SalesMangement
CustomerMangement
ProductMangement
mydata_Satisfation
RegressionModel = c(OrderMangement,SalesMangement,CustomerMangement,
ProductMangement,mydata_Satisfation)
RegressionModel
name(RegressionModel)
str(RegressionModel)
class(RegressionModel)
names(RegressionModel)
lm(OrderMangement~mydata_Satisfation)
plot(OrderMangement~mydata_Satisfation)
plot(SalesMangement~mydata_Satisfation)
plot(SalesMangement~mydata_Satisfation)
plot(CustomerMangement~mydata_Satisfation)
plot(ProductMangement~mydata_Satisfation)
lm(mydata_Satisfation~OrderMangement+SalesMangement+CustomerMangement+ProductMangement)
plot(mydata_Satisfation~OrderMangement)
plot(mydata_Satisfation~SalesMangement)
plot(mydata_Satisfation~CustomerMangement)
plot(mydata_Satisfation~ProductMangement)
RegressionModel = data.frame(OrderMangement,SalesMangement,CustomerMangement,
ProductMangement,mydata_Satisfation)
RegressionModel
RegressionModel = data.frame(OrderMangement,SalesMangement,CustomerMangement,
ProductMangement,mydata_Satisfation)
RegressionModel
#RegressionModel
Model_OM = plot(mydata_Satisfation~OrderMangement)
Model_OM = lm(mydata_Satisfation~OrderMangement,RegressionModel)
summary(Model_OM)
Model_SM = lm(mydata_Satisfation~SalesMangement,RegressionModel)
summary(Model_SM)
Model_CM = lm(mydata_Satisfation~CustomerMangement,RegressionModel)
summary(Model_CM)
abline(Model_OM,col="red",lwd=2)
abline(Model_SM,col="red",lwd=2)
abline(Model_SM,col="blue",lwd=2)
abline(Model_CM,col="green",lwd=2)
Model_PM = lm(mydata_Satisfation~ProductMangement,RegressionModel)
summary(Model_PM)
abline(Model_CM,col="orange",lwd=2)
abline(Model_CM,col="green",lwd=2)
abline(Model_PM,col="orange",lwd=2)
plot(mydata_Satisfation~OrderMangement)
Model_OM = lm(mydata_Satisfation~OrderMangement,RegressionModel)
summary(Model_OM)
abline(Model_OM,col="red",lwd=2)
plot(mydata_Satisfation~SalesMangement)
Model_SM = lm(mydata_Satisfation~SalesMangement,RegressionModel)
summary(Model_SM)
abline(Model_SM,col="blue",lwd=2)
plot(mydata_Satisfation~CustomerMangement)
Model_CM = lm(mydata_Satisfation~CustomerMangement,RegressionModel)
summary(Model_CM)
abline(Model_CM,col="green",lwd=2)
plot(mydata_Satisfation~ProductMangement)
Model_PM = lm(mydata_Satisfation~ProductMangement,RegressionModel)
summary(Model_PM)
abline(Model_PM,col="orange",lwd=2)
#multiple linear regression
plot(RegressionModel)
Model_MR = lm(mydata_Satisfation~OrderMangement+SalesMangement+CustomerMangement+ProductMangement)
summary(Model_MR)
Model_MR = lm(mydata_Satisfation~OrderMangement+SalesMangement+CustomerMangement
+ProductMangement,RegressionModel)
summary(Model_MR)
cor(OrderMangement,SalesMangement)
cor(OrderMangement,CustomerMangement)
Rotate$scores #will give scores for 4 factors, here we can check for these 4 factors
#rather then going through all 11 fields.
OrderMangement=Rotate$scores[,1] #RC1
SalesMangement=Rotate$scores[,2] #RC2
CustomerMangement=Rotate$scores[,3] #RC3
ProductMangement=Rotate$scores[,4] #RC4
##getting customer satisfaciton variable
mydata_Satisfation =read.csv("Factor-Hair-Revised.csv", header=TRUE)
mydata_Satisfation=mydata_Satisfation[,13]
##make data frame
RegressionModel = data.frame(OrderMangement,SalesMangement,CustomerMangement,
ProductMangement,mydata_Satisfation)
Model_MR1 = lm(mydata_Satisfation~OrderMangement+SalesMangement+CustomerMangement
+ProductMangement,RegressionModel)
summary(Model_MR1)
Model_MR1 = lm(mydata_Satisfation~OrderMangement+SalesMangement
+ProductMangement,RegressionModel)
summary(Model_MR1)
str(RegressionModel)
pairs(RegressionModel)
plot(RegressionModel)
pairs
pairs(RegressionModel)
cor(RegressionModel)
plot(mydata_Satisfation~OrderMangement)
Model_OM = lm(mydata_Satisfation~OrderMangement,RegressionModel)
summary(Model_OM)
abline(Model_OM,col="red",lwd=2)
plot(mydata_Satisfation~SalesMangement)
Model_SM = lm(mydata_Satisfation~SalesMangement,RegressionModel)
summary(Model_SM)
abline(Model_SM,col="blue",lwd=2)
plot(mydata_Satisfation~CustomerMangement)
Model_CM = lm(mydata_Satisfation~CustomerMangement,RegressionModel)
summary(Model_CM)
abline(Model_CM,col="green",lwd=2)
plot(mydata_Satisfation~ProductMangement)
Model_PM = lm(mydata_Satisfation~ProductMangement,RegressionModel)
summary(Model_PM)
abline(Model_PM,col="orange",lwd=2)
plot(mydata_Satisfation~OrderMangement)
Model_OM = lm(mydata_Satisfation~OrderMangement,RegressionModel)
summary(Model_OM)
abline(Model_OM,col="red",lwd=2)
plot(mydata_Satisfation~SalesMangement)
Model_SM = lm(mydata_Satisfation~SalesMangement,RegressionModel)
summary(Model_SM)
abline(Model_SM,col="blue",lwd=2)
plot(mydata_Satisfation~CustomerMangement)
Model_CM = lm(mydata_Satisfation~CustomerMangement,RegressionModel)
summary(Model_CM)
abline(Model_CM,col="green",lwd=2)
plot(mydata_Satisfation~ProductMangement)
Model_PM = lm(mydata_Satisfation~ProductMangement,RegressionModel)
summary(Model_PM)
abline(Model_PM,col="orange",lwd=2)
Model_MR1 = lm(mydata_Satisfation~OrderMangement+SalesMangement
+ProductMangement,RegressionModel)
summary(Model_MR1)
AIC(Model_MR1)
AIC(Model_MR)
##dropping customerManagement and checking model
Model_MR1 = lm(mydata_Satisfation~OrderMangement+SalesMangement
+ProductMangement,RegressionModel)
summary(Model_MR1)
AIC(Model_MR) ## with all 4 inedependent variables
AIC(Model_MR1) ## with 3 indepennt variables , dropping customer management
##Simple linear regression ####
insurance =read.csv(file.choose())
str(insurance)
summary(insurance)
attach(insurance)
boxplot(insurance$avgspend~insurance$region)
##library needed for regression
library(psych)
library(car)
##running regression
lm(insurance$avgspend~insurance$region)
##Simple linear regression ####
insurance =read.csv(file.choose())
aov(Model_MR)
Model_MR2 = lm(mydata_Satisfation~OrderMangement+SalesMangement
,RegressionModel)
summary(Model_MR1)
summary(Model_MR2)
Model_MR2 = lm(mydata_Satisfation~OrderMangement+ProductMangement
,RegressionModel)
summary(Model_MR2)
Model_MR2 = lm(mydata_Satisfation~SalesMangement+ProductMangement
,RegressionModel)
summary(Model_MR2)
coefficients(Model_MR)
confint(Model_MR)
?confint
plot(Model_MR)
plot(Model_MR)
par(mfrow=c(2,2))
plot(Model_MR)
aov(Model_MR1)
aov(Model_MR1)
mean(Model_MR$residuals)
#multiple linear regression
plot(RegressionModel)
mean(Model_MR$residuals)
par(mfrow=c(2,2))
plot(Model_MR)
cor.test(OrderMangement+SalesMangement+CustomerMangement
+ProductMangement, Model_MR$residuals)
cor(OrderMangement~Model_MR$residuals)
cor(OrderMangement,Model_MR$residuals)
cor(SalesMangement,Model_MR$residuals)
cor(CustomerMangement,Model_MR$residuals)
cor(ProductMangement,Model_MR$residuals)
plot(Model_MR$residuals)
plot(Model_MR$coefficients)
aov(Model_MR1)
aov(Model_MR)
fitted(Model_MR)
?fitted
fitted(Model_MR1)
?influence
